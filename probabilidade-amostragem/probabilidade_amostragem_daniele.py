# -*- coding: utf-8 -*-
"""probabilidade_amostragem_Daniele.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXIMZxsvWcfMeJZDn0ryCAue17Wmy5mF

Estatística - Probabilidade e Amostragem
Desafio Final

Considerando a base de dados de populacao_brasileira.json responda as
questões abaixo (os dados são fictícios).

Você é uma pesquisadora desenvolvendo uma análise sobre as
características da força de trabalho nos estados brasileiros. Responda as
perguntas abaixo:
"""

#conectar o google drive
from google.colab import drive
import pandas as pd

# Conectar ao Google Drive
drive.mount('/content/drive')

# Carregar o CSV
caminho_csv = ('/content/drive/My Drive/populacao_brasileira.csv')  # Substitua pelo caminho correto
dados = pd.read_csv(caminho_csv)

"""1. Considere pessoas fluentes em inglês, qual a probabilidade
complementar? Ou seja, qual a probabilidade de escolhermos uma
pessoa aleatória e ela não ser fluente em inglês. Considere fluente
quem tem o nível avançado.
"""

# Exibir os nomes das colunas do DataFrame
print(dados.columns)

# Filtrar pessoas fluentes em inglês (nível avançado)
fluentes = dados[dados['nível de proficiência em inglês'] == 'Avançado']
total_fluentes = len(fluentes)

# Total de pessoas na amostra
total_pessoas = len(dados)

# Calcular a probabilidade de ser fluente
prob_fluente = total_fluentes / total_pessoas

# Calcular a probabilidade complementar (não ser fluente)
prob_nao_fluente = 1 - prob_fluente

print(f"Probabilidade de não ser fluente: {prob_nao_fluente:.2%}")

"""2. Se uma pessoa escolhida aleatoriamente for de Alagoas ou do Pará,
qual é a probabilidade de ela ter uma renda superior a 5 mil reais?
"""

# Verificar se há pessoas de Alagoas ou Pará no DataFrame
print(dados['estado'].value_counts())

# Filtrar pessoas de Alagoas ou do Pará
pessoas_alagoas_para = dados[dados['estado'].isin(['AL', 'PA'])]

# Total de pessoas de Alagoas ou do Pará
total_alagoas_para = len(pessoas_alagoas_para)

# Verificar se há pessoas de Alagoas ou do Pará
print(f"Total de pessoas de Alagoas ou Pará: {total_alagoas_para}")

# Filtrar pessoas com renda superior a 5 mil reais
pessoas_renda_superior = pessoas_alagoas_para[pessoas_alagoas_para['renda'] > 5000]

# Total de pessoas de Alagoas ou do Pará com renda superior a 5 mil
total_renda_superior = len(pessoas_renda_superior)

# Verificar se há pessoas com renda superior a 5 mil reais
print(f"Total de pessoas de Alagoas ou Pará com renda superior a 5 mil reais: {total_renda_superior}")

# Calcular a probabilidade
if total_alagoas_para > 0:
    probabilidade = total_renda_superior / total_alagoas_para
    print(f"Probabilidade de uma pessoa de Alagoas ou do Pará ter renda superior a 5 mil reais: {probabilidade:.2%}")
else:
    print("Não há registros de pessoas de Alagoas ou Pará no DataFrame.")

"""3. Descubra a probabilidade de uma pessoa ter ensino superior completo
no estado do Amazonas. Qual a probabilidade da quinta pessoa que
você conversar, que é amazonense, ter ensino superior completo?
"""

import pandas as pd
from scipy import stats

# Filtrar pessoas do Amazonas
pessoas_amazonas = dados[dados['estado'] == 'AM']

# Filtrar pessoas com ensino superior ou pós-graduação
p_superior = pessoas_amazonas[(pessoas_amazonas['escolaridade'] == 'Superior') | (pessoas_amazonas['escolaridade'] == 'Pós-graduação')]

# Calcular o total de pessoas no Amazonas
total_am = pessoas_amazonas.shape[0]

# Calcular a probabilidade
prop_am = len(p_superior) / total_am
print(f"Probabilidade de uma pessoa no Amazonas ter ensino superior ou pós-graduação: {prop_am:.2%}")

# Calcular a probabilidade usando a distribuição geométrica
prob_geom_5_pessoa = stats.geom.pmf(k=5, p=prop_am)
print(f'Probabilidade da quinta pessoa ter ensino superior: {prob_geom_5_pessoa:.2%}')

"""4. Considerando a renda das pessoas do nosso conjunto, podemos dizer
que a renda de uma pessoa brasileira está na sua maioria em que faixa
(faça faixa de 1.500 reais)? Qual é a sua função densidade de
probabilidade?
"""

#Determinar a Faixa de Renda
import pandas as pd

# Supondo que você já tenha o DataFrame 'dados' carregado

# Definir faixas de renda de R$1.500
bins = range(0, int(dados['renda'].max()) + 1500, 1500)
labels = [f'{i}-{i + 1500}' for i in bins[:-1]]

# Criar a coluna com faixas de renda
dados['faixa_renda'] = pd.cut(dados['renda'], bins=bins, labels=labels, right=False)

# Contar o número de pessoas em cada faixa de renda
contagem_faixas = dados['faixa_renda'].value_counts().sort_index()

# Exibir as faixas e suas contagens
print("Contagem de pessoas por faixa de renda:")
print(contagem_faixas)

# Encontrar a faixa com o maior número de pessoas
faixa_mais_comum = contagem_faixas.idxmax()
print(f"A faixa de renda com o maior número de pessoas é: {faixa_mais_comum}")

#Usando Histograma para Aproximação:
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import norm

# Ajustar a distribuição normal
mu, std = norm.fit(dados['renda'])

# Definir os intervalos para o histograma
intervalo = 1500
faixas_renda = np.arange(0, dados['renda'].max() + intervalo, intervalo)

# Plotar o histograma da renda
plt.hist(dados['renda'], bins=faixas_renda, density=True, alpha=0.6, color='g', edgecolor='black')

# Adicionar uma linha para a função densidade de probabilidade
xmin, xmax = plt.xlim()
x = np.linspace(xmin, xmax, 100)
p = norm.pdf(x, mu, std)
plt.plot(x, p, 'm', linewidth=2)  # 'm' é a cor rosa

# Ajustar os eixos
plt.xlabel('Renda')
plt.ylabel('Densidade de Probabilidade')
plt.title('Histograma da Renda com Função Densidade de Probabilidade')
plt.grid(True)

plt.show()

#Usando Distribuição Normal para PDF(Probability Density Function)se apropriado:
import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

# Ajustar a distribuição normal
mu, std = norm.fit(dados['renda'])

# Calcular a função densidade de probabilidade para um intervalo de valores
valores = np.linspace(dados['renda'].min(), dados['renda'].max(), 100)
pdf = norm.pdf(valores, mu, std)

# Exibir a função densidade de probabilidade
plt.plot(valores, pdf, 'm-', lw=2, label='PDF Normal')  # 'm' é a cor rosa
plt.xlabel('Renda')
plt.ylabel('Densidade de Probabilidade')
plt.title('Função Densidade de Probabilidade da Renda')
plt.legend()
plt.grid(True)
plt.show()

"""5. Calcule a média e a variância da renda da amostra. Depois faça a
distribuição normal, inclua o gráfico.
"""

#Código para Cálculo da Média e Variância e Distribuição Normal
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import norm

# Supondo que você já tenha o DataFrame 'dados' carregado

# Calcular a média e a variância da renda
media_renda = dados['renda'].mean()
variancia_renda = dados['renda'].var()

print(f'Média da renda: R${media_renda:.2f}')
print(f'Variância da renda: {variancia_renda:.2f}')

# Ajustar a distribuição normal
mu, sigma = norm.fit(dados['renda'])

# Gerar valores para a função densidade de probabilidade
x = np.linspace(dados['renda'].min(), dados['renda'].max(), 100)
pdf = norm.pdf(x, mu, sigma)

# Plotar o histograma da renda e a função densidade de probabilidade
plt.figure(figsize=(10, 6))
plt.hist(dados['renda'], bins=30, density=True, alpha=0.6, color='g', edgecolor='black', label='Histograma da Renda')
plt.plot(x, pdf, 'm', linewidth=2, label='Distribuição Normal Ajustada')  # 'm' é a cor rosa
plt.xlabel('Renda (R$)')
plt.ylabel('Densidade de Probabilidade')
plt.title('Histograma da Renda e Função Densidade de Probabilidade Normal')
plt.legend()
plt.grid(True)
plt.show()

"""6. Primeiro considere a probabilidade encontrada no nosso conjunto de
pessoas com escolaridade de pós-graduação. Considerando a amostra
de população brasileira com 1 milhão de habitantes, qual a
probabilidade de encontrarmos 243 mil pessoas com pós-graduação?
"""

import pandas as pd
from scipy import stats

# Carregar o CSV
caminho_csv = '/content/drive/My Drive/populacao_brasileira.csv'  # Substitua pelo caminho correto
dados = pd.read_csv(caminho_csv)

# Calcular a probabilidade de uma pessoa ter pós-graduação
p_pos_graduacao = len(dados[dados['escolaridade'] == 'Pós-graduação']) / len(dados)
print(f'Proporção de pessoas com pós-graduação na amostra: {p_pos_graduacao:.4f}')

# Parâmetros para a distribuição binomial
n = 1000000  # Total de pessoas na amostra
k = 243000   # Número de pessoas com pós-graduação

# Calcular a probabilidade usando a distribuição binomial
prob_pos_grad = stats.binom.pmf(k, n, p_pos_graduacao)

print(f'Probabilidade de encontrarmos exatamente 243 mil pessoas com pós-graduação: {prob_pos_grad:.15f}')

"""7. Somando as densidades nós temos a função de densidade acumulada.
Considerando a coluna ‘Escolaridade’ faça a função de densidade
acumulada discreta para cada nível de escolaridade.
"""

import pandas as pd

# Carregar o CSV
caminho_csv = '/content/drive/My Drive/populacao_brasileira.csv'  # Substitua pelo caminho correto
dados = pd.read_csv(caminho_csv)

# Contar o número de pessoas por nível de escolaridade
frequencias = dados['escolaridade'].value_counts()

# Calcular a densidade de cada nível de escolaridade
total_pessoas = len(dados)
densidades = frequencias / total_pessoas

# Calcular a função de densidade acumulada (CDF)
cdf = densidades.sort_index().cumsum()

# Exibir a função de densidade acumulada discreta para cada nível de escolaridade
print("Função de Densidade Acumulada Discreta (CDF - Função de Densidade Acumulada) para cada nível de escolaridade:")
print(cdf)

import pandas as pd
import matplotlib.pyplot as plt

# ... (seu código para carregar os dados e calcular a FDA)

# Visualizar a FDA com a cor rosa
plt.figure(figsize=(10, 6))
plt.plot(cdf.index, cdf, marker='o', linestyle='-', color='pink')
plt.xlabel('Nível de Escolaridade')
plt.ylabel('Proporção Acumulada')
plt.title('Função de Densidade Acumulada por Nível de Escolaridade')
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

"""8. Qual a margem de erro amostral da proporção populacional
considerando a proporção de pessoas com nível de inglês
intermediário?
"""

import pandas as pd
import numpy as np

# ... (seu código para carregar os dados)

def calcular_margem_erro(p, n, z=1.96):
    """Calcula a margem de erro amostral para uma proporção."""
    margem_erro = z * np.sqrt((p * (1 - p)) / n)
    return margem_erro

# Calcular a proporção de pessoas com inglês intermediário
p_intermediario = len(dados[dados['nível de proficiência em inglês'] == 'Intermediário']) / len(dados)

# Tamanho da amostra
n = len(dados)

# Nível de confiança de 95%
z = 1.96

# Calcular a margem de erro
margem_erro = calcular_margem_erro(p_intermediario, n)

# Calcular o intervalo de confiança
intervalo_confianca = (p_intermediario - margem_erro, p_intermediario + margem_erro)

print(f'Proporção de pessoas com inglês intermediário: {p_intermediario:.4f}')
print(f'Margem de erro amostral: {margem_erro:.4f}')
print(f'Intervalo de confiança de 95%: {intervalo_confianca}')

"""9. Calcula a renda da população. Qual a probabilidade de encontrar 60
pessoas com uma renda mil reais superior à média?
"""

import pandas as pd
import numpy as np
from scipy.stats import norm

# Assumindo que você tem um DataFrame chamado 'dados' com uma coluna 'renda'

# Calcular a média e o desvio padrão da renda
media_renda = dados['renda'].mean()
desvio_padrao = dados['renda'].std()

# Padronizar os valores
dados['z_score'] = (dados['renda'] - media_renda) / desvio_padrao

# Probabilidade de um indivíduo ter renda 1000 acima da média (assumindo distribuição normal)
prob_acima_1000 = 1 - norm.cdf(1)

# Tamanho da amostra
n = len(dados)

# Probabilidade de encontrar exatamente 60 pessoas com renda 1000 acima da média (distribuição binomial)
prob_60_pessoas = stats.binom.pmf(60, n, prob_acima_1000)

print(f"Probabilidade de um indivíduo ter renda 1000 acima da média: {prob_acima_1000:.4f}")
print(f"Probabilidade de encontrar exatamente 60 pessoas com renda 1000 acima da média: {prob_60_pessoas:.4f}")

"""10. Qual a probabilidade de escolhermos alguém do Sudeste que seja
homem, com ensino fundamental e com renda maior que 2 mil reais por
mês?
"""

import pandas as pd

# Carregar o CSV
caminho_csv = '/content/drive/My Drive/populacao_brasileira.csv'  # Substitua pelo caminho correto
dados = pd.read_csv(caminho_csv)

# Filtrar as pessoas do Sudeste
sudeste = dados[dados['estado'].isin(['SP', 'RJ', 'MG', 'ES'])]

# Filtrar pessoas que são homens, com ensino fundamental e renda maior que 2 mil reais por mês
criterios = sudeste[
    (sudeste['sexo'] == 'Masculino') &
    (sudeste['escolaridade'] == 'Fundamental') &
    (sudeste['renda'] > 2000)
]

# Total de pessoas que atendem aos critérios
total_criterios = len(criterios)

# Total de pessoas na amostra
total_pessoas = len(dados)

# Calcular a probabilidade
probabilidade = total_criterios / total_pessoas

print(f'Probabilidade de escolher alguém do Sudeste que seja homem, com ensino fundamental e com renda maior que 2 mil reais por mês: {probabilidade:.4%}')