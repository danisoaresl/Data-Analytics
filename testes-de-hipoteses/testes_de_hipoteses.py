# -*- coding: utf-8 -*-
"""testes_de_hipoteses.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Z5dHm39k24HBGWi0LZXwbaDN6gfal_qn
"""

from google.colab import drive

# Montar o Google Drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Carregar o CSV com o nome correto
df_ab = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/experimento_teste_ab.csv')

"""
    1. Qual dos cenários tem a maior taxa de conversão?


"""

# Agrupar por versão da página e calcular a média de conversões
conversao_por_versao = df_ab.groupby('Versão_Página')['Conversões'].mean()

# Exibir as taxas de conversão por versão
print(conversao_por_versao)

# Encontrar a versão com a maior taxa de conversão
melhor_versao = conversao_por_versao.idxmax()

print(f"\nA versão da página com a maior taxa de conversão é: {melhor_versao}\n")

# Plotar as taxas de conversão por versão
conversao_por_versao.plot(kind='bar', color='pink')

plt.title('Taxa de Conversão por Versão da Página')
plt.xlabel('Versão da Página')
plt.ylabel('Taxa de Conversão')

plt.show()

"""     
    2. Calcule qual o tamanho da amostra necessária para o desenvolvimento de um teste A/B, seguindo os seguintes critérios:

        a. O cenário A, da base, como o inicial, que funciona hoje.

        b. Considere 95% de confiança de que o efeito na conversão não foi aleatório com um nível de significância de 5% (alpha = 0,05).

        c. Também considere 80% de certeza conseguir capturar o efeito da nova abordagem.
        
        d. O aumento para 10% de conversão.
"""

from statsmodels.stats.power import NormalIndPower
from statsmodels.stats.proportion import proportion_effectsize

# Taxas de conversão esperadas
taxa_conversao_A = 0.105  # Conversão da versão A (atual)
taxa_conversao_B = 0.105 * 1.10  # Um aumento de 10% na taxa de conversão

# Tamanho do efeito
efeito = proportion_effectsize(taxa_conversao_A, taxa_conversao_B)

# Poder estatístico e nível de confiança
poder = 0.8  # 80%
alpha = 0.05  # 95% de confiança

# Calculando o tamanho da amostra necessária
analisador = NormalIndPower()
tamanho_amostra = analisador.solve_power(efeito, power=poder, alpha=alpha, ratio=1)

print(f"Tamanho da amostra necessário por grupo: {int(np.ceil(tamanho_amostra))}")

"""
    3. Considerando uma amostra de 45 números que representam o index do dataframe, índices= ([909, 751, 402, 400, 726, 39, 184, 269, 255, 769, 209, 715, 677, 381, 793, 697,  89, 280, 232, 756, 358,  36, 439, 768, 967, 699, 473, 222,  89, 639, 883, 558, 757,  84, 907, 895, 217, 224, 311, 348, 146, 505, 273, 957, 362]). Considerando essa amostra é possível dizer que a idade média das pessoas com problemas cardíacos é maior que 50 anos? Nível de significância igual a 5%.

"""

import pandas as pd
from scipy import stats

# Carregar a base pacientes.csv
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Verificar os nomes das colunas
print(df_pacientes.columns)

# Índices da amostra
indices = [909, 751, 402, 400, 726, 39, 184, 269, 255, 769,
           209, 715, 677, 381, 793, 697, 89, 280, 232, 756,
           358, 36, 439, 768, 967, 699, 473, 222, 89, 639,
           883, 558, 757, 84, 907, 895, 217, 224, 311, 348,
           146, 505, 273, 957, 362]

# Amostra de idades (ajustar o nome da coluna para 'Idade')
amostra = df_pacientes.loc[indices, 'Idade']  # Use 'Idade' com letra maiúscula

# Hipótese nula: idade média = 50 anos
t_stat, p_value = stats.ttest_1samp(amostra, 50)

# Resultado do teste
print(f"\nt-stat: {t_stat:.4f}, p-value: {p_value:.4f}\n")

if p_value < 0.05:
    print("Rejeitamos a hipótese nula. A idade média é maior que 50 anos.\n")
else:
    print("Não podemos rejeitar a hipótese nula. A idade média não é significativamente maior que 50 anos.\n")

"""4. Queremos entender que tipo de amostra estamos lidando se dividirmos os conjuntos em 2, sendo um com pessoas que têm condições de saúde adicionais e o outro com pessoas saudáveis. Seria dependente ou independente?

Resposta: Dado que você está lidando com duas populações distintas (pessoas com condições de saúde adicionais e pessoas saudáveis), a análise pode ser considerada como amostras independentes.
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from scipy import stats

# Carregar o CSV
df_ab = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Verificar a distribuição das variáveis em cada grupo
print(df_ab.groupby('Nome_Estado_Saude').describe())

# Testar a diferença de médias de variáveis numéricas (Idade)
t_stat, p_value = stats.ttest_ind(df_ab[df_ab['Nome_Estado_Saude'] == 1]['Idade'],
                                 df_ab[df_ab['Nome_Estado_Saude'] == 0]['Idade'])
print(f"Teste t: t-statistic = {t_stat:.4f}, p-value = {p_value:.4f}")

# Testar a associação entre variáveis categóricas (Genero)
crosstab = pd.crosstab(df_ab['Nome_Estado_Saude'], df_ab['Genero'])
chi2, p, dof, expected = stats.chi2_contingency(crosstab)
print(f"Teste Qui-quadrado: chi2 = {chi2:.4f}, p-value = {p:.4f}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar a base de dados
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Função para criar um boxplot comparando duas variáveis numéricas por grupo
def plot_boxplot(df, coluna_numerica, coluna_grupo, labels, cor='pink'):
    """Cria um boxplot personalizado com a cor especificada.

    Args:
        df: DataFrame com os dados.
        coluna_numerica: Nome da coluna com a variável numérica.
        coluna_grupo: Nome da coluna com a variável categórica para agrupamento.
        labels: Lista com os rótulos dos grupos.
        cor: Cor dos boxplots (opcional, padrão é 'pink').
    """

    plt.figure(figsize=(8, 6))
    sns.boxplot(x=coluna_grupo, y=coluna_numerica, data=df, palette=[cor])
    plt.title(f'Comparação de {coluna_numerica} entre os grupos')
    plt.show()

# Exemplo de uso das funções
plot_boxplot(df_pacientes, 'Idade', 'Nome_Estado_Saude', ['Saudável', 'Com condições de saúde adicionais'])

import seaborn as sns

# Gráfico de dispersão para o grupo saudável
sns.scatterplot(x='Idade', y='Pressao_Arterial', data=df_pacientes[df_pacientes['Nome_Estado_Saude'] == 'Saudável'])
plt.title('Relação entre Idade e Pressão Arterial (Saudáveis)')
plt.show()

# Gráfico de dispersão para o grupo com condições de saúde adicionais
sns.scatterplot(x='Idade', y='Pressao_Arterial', data=df_pacientes[df_pacientes['Nome_Estado_Saude'] != 'Saudável'])
plt.title('Relação entre Idade e Pressão Arterial (Com condições)')
plt.show()

"""5. Agora considere o um conjunto de pessoas aleatória que representam o index do dataframe,  índices = ([690, 894,  67, 201, 364,  19,  60, 319, 588, 643, 855, 623, 530, 174, 105, 693,   6, 462, 973, 607, 811, 346, 354, 966, 943, 372]), podemos dizer que a pressão arterial média para pacientes com condições de saúde adicionais é igual à pressão arterial média para pacientes sem condições adicionais de saúde? Considere o nível de significância a 6%.

Resposta:

Número de Pacientes:

Saudáveis: 490

Com Condições de Saúde Adicionais: 510

Resultados do Teste T:

t-stat: 0.8343

p-value: 0.4043

Com um p-value de 0.4043, não rejeitamos a hipótese nula, o que indica que não há diferença significativa nas pressões arteriais médias entre os grupos. Portanto, podemos concluir que as pressões arteriais médias dos pacientes saudáveis e daqueles com condições de saúde adicionais não são significativamente diferentes.
"""

import pandas as pd

# Carregar a base de dados
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Verificar os nomes das colunas
print(df_pacientes.columns)

# Contar o número de pacientes saudáveis e com condições de saúde adicionais
num_saudaveis = df_pacientes[df_pacientes['Nome_Estado_Saude'] == 'Saudável'].shape[0]
num_condicoes_adicionais = df_pacientes[df_pacientes['Nome_Estado_Saude'] != 'Saudável'].shape[0]

print(f"\nNúmero de pacientes saudáveis: {num_saudaveis}")
print(f"Número de pacientes com condições de saúde adicionais: {num_condicoes_adicionais}\n")

# Análise estatística (se necessário)
# Exemplo: Média e desvio padrão das idades para ambos os grupos
media_idade_saudaveis = df_pacientes[df_pacientes['Nome_Estado_Saude'] == 'Saudável']['Idade'].mean()
media_idade_condicoes = df_pacientes[df_pacientes['Nome_Estado_Saude'] != 'Saudável']['Idade'].mean()

desvio_idade_saudaveis = df_pacientes[df_pacientes['Nome_Estado_Saude'] == 'Saudável']['Idade'].std()
desvio_idade_condicoes = df_pacientes[df_pacientes['Nome_Estado_Saude'] != 'Saudável']['Idade'].std()

print(f"Média da idade dos pacientes saudáveis: {media_idade_saudaveis}, Desvio padrão: {desvio_idade_saudaveis}\n")
print(f"Média da idade dos pacientes com condições de saúde adicionais: {media_idade_condicoes}, Desvio padrão: {desvio_idade_condicoes}")

from scipy import stats

# Amostras de pressão arterial para cada grupo
pressao_saudaveis = df_pacientes[df_pacientes['Nome_Estado_Saude'] == 'Saudável']['Pressao_Arterial']
pressao_condicoes = df_pacientes[df_pacientes['Nome_Estado_Saude'] != 'Saudável']['Pressao_Arterial']

# Teste t para amostras independentes
t_stat, p_value = stats.ttest_ind(pressao_saudaveis, pressao_condicoes)

# Resultado do teste
print(f"\nt-stat: {t_stat:.4f}, p-value: {p_value:.4f}\n")

if p_value < 0.05:
    print("Rejeitamos a hipótese nula. As pressões arteriais médias são significativamente diferentes entre os grupos.")
else:
    print("Não podemos rejeitar a hipótese nula. As pressões arteriais médias não são significativamente diferentes entre os grupos.")

"""6. Existe uma diferença significativa na pressão arterial média entre diferentes grupos étnicos nesta população? (Teste ANOVA, alpha é 5%)

a. Hipótese Nula (H0): A pressão arterial média é a mesma em todos os grupos étnicos.

Resposta:

Resultados do Teste ANOVA:

F: 0.232453

p-value: 0.8738

Interpretação: Com um p-value de 0.8738, que é maior que o nível de significância de 0.05, não rejeitamos a hipótese nula. Portanto, não há evidências suficientes para afirmar que existe uma diferença significativa na pressão arterial média entre os diferentes grupos étnicos nesta população.
"""

import pandas as pd
import scipy.stats as stats
from statsmodels.formula.api import ols
import statsmodels.api as sm

# Carregar a base de dados (substitua o caminho pelo correto)
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# 6a. Teste ANOVA - Diferença na pressão arterial entre grupos étnicos
# Realizar a ANOVA
modelo = ols('Pressao_Arterial ~ C(Etnia)', data=df_pacientes).fit()
anova_resultado = sm.stats.anova_lm(modelo, typ=2)

# Exibir os resultados da ANOVA
print("Resultado ANOVA:")
print(anova_resultado)

print('\n' + '-' * 50 + '\n')  # Linha separadora

"""b. Existe uma associação entre a idade dos pacientes e sua pressão arterial?

    i. Hipótese Nula (H0): A idade dos pacientes é independente da pressão arterial.

    ii. Hipótese Alternativa (H1): A idade dos pacientes está associada à sua pressão arterial.

Resposta:

Coeficiente de correlação de Pearson: −0.0214

O coeficiente de correlação de Pearson próximo de zero sugere que não há uma correlação linear significativa entre a idade dos pacientes e a pressão arterial.

Valor p: 0.4994

O valor p de
0.4994
0.4994 é maior que o nível de significância de 0.05, o que indica que não há evidência suficiente para rejeitar a hipótese nula.

Baseando-se nos resultados obtidos, não podemos afirmar que existe uma associação significativa entre a idade dos pacientes e sua pressão arterial. Assim, a hipótese nula (H0) é mantida, ou seja, a idade dos pacientes é considerada independente da pressão arterial.
"""

import pandas as pd
from scipy import stats

# Carregar a base de dados com o caminho correto
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Verificar os dados
print("Primeiras linhas do DataFrame:\n")
print(df_pacientes.head())

print('\n' + '-' * 50 + '\n')  # Linha separadora

print("Resumo estatístico do DataFrame:\n")
print(df_pacientes.describe())

print('\n' + '-' * 50 + '\n')  # Linha separadora

# Calcular a correlação de Pearson
correlacao, p_valor = stats.pearsonr(df_pacientes['Idade'], df_pacientes['Pressao_Arterial'])

# Exibir os resultados da correlação
print(f"\nCoeficiente de correlação de Pearson: {correlacao}")
print(f"Valor p: {p_valor}")

"""    c. pótese Alternativa (H1): Há uma diferença significativa na pressão arterial média entre pelo menos dois grupos étnicos nesta população.

"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import statsmodels.api as sm
from statsmodels.formula.api import ols

# Carregar a base de dados com o caminho correto
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Resumo dos dados
print("Resumo dos dados:\n")
print(df_pacientes.describe())

print('\n' + '-' * 50 + '\n')  # Linha separadora

# Boxplot para comparar a pressão arterial entre grupos étnicos
sns.boxplot(x='Etnia', y='Pressao_Arterial', data=df_pacientes, palette='pink')
plt.title('Comparação da Pressão Arterial por Etnia')
plt.show()

print('\n' + '-' * 50 + '\n')  # Linha separadora

# Modelo de regressão linear para ANOVA
modelo = ols('Pressao_Arterial ~ C(Etnia)', data=df_pacientes).fit()

# Tabela ANOVA
anova_table = sm.stats.anova_lm(modelo, typ=2)
print("Tabela ANOVA:\n")
print(anova_table)

print('\n' + '-' * 50 + '\n')  # Linha separadora

# Verificando o resultado da ANOVA
p_value = anova_table['PR(>F)'][0]
if p_value < 0.05:
    print("Rejeitamos a hipótese nula, há diferença significativa na pressão arterial média entre os grupos étnicos.")
else:
    print("Não rejeitamos a hipótese nula, não há diferença significativa na pressão arterial média entre os grupos étnicos.")

"""         
    7. Lúcia é uma pesquisadora e tem o objetivo de entender a relação de gênero neste grupo de pacientes. Acredita-se que há uma relação entre o sexo e condições de saúde adicionais. (Teste qui-quadrado)
"""

import pandas as pd
from scipy.stats import chi2_contingency

# Carregar os dados
dados = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Criar a tabela de contingência (exemplo: gênero x estado de saúde)
tabela_contingencia = pd.crosstab(dados['Genero'], dados['Nome_Estado_Saude'])

# Realizar o teste qui-quadrado
chi2, p, dof, expected = chi2_contingency(tabela_contingencia)

# Imprimir os resultados
print('Tabela de contingência:')
print(tabela_contingencia)

print('\n' + '-' * 50 + '\n')  # Linha separadora

print('Resultados do Teste Qui-quadrado:')
print(f'Qui-quadrado: {chi2:.2f}')  # Arredondando o valor do qui-quadrado
print(f'p-valor: {p:.5f}')  # Arredondando o p-valor

print('\n' + '-' * 50 + '\n')  # Linha separadora

# Interpretar os resultados
if p < 0.05:
    print("Há evidência estatística de associação entre o gênero e o estado de saúde.")
else:
    print("Não há evidência estatística de associação entre o gênero e o estado de saúde.")

"""     
    8. Qual é o intervalo de confiança para a média da pressão arterial entre os pacientes com condições de saúde adicionais? (nível de confiança 95%)


"""

import pandas as pd
import numpy as np

# Carregar os dados
df = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')

# Filtrar os dados para pacientes com condições de saúde adicionais
df_com_condicoes = df[df['Nome_Estado_Saude'] != 'Saudável']  # Alterar conforme necessário

# Verificar se existem dados filtrados
if df_com_condicoes.empty:
    print("Não há pacientes com condições de saúde adicionais.")
else:
    # Calcular a média e o desvio padrão da pressão arterial
    media = df_com_condicoes['Pressao_Arterial'].mean()
    desvio_padrao = df_com_condicoes['Pressao_Arterial'].std()
    n = len(df_com_condicoes)

    # Calcular o intervalo de confiança (95%)
    z = 1.96  # Para nível de confiança de 95%
    margem_de_erro = z * (desvio_padrao / np.sqrt(n))
    intervalo_confianca = (media - margem_de_erro, media + margem_de_erro)

    # Exibir o intervalo de confiança
    print(f"Intervalo de confiança para a média da pressão arterial: {intervalo_confianca}")

"""    9. A distribuição da pressão arterial na população segue uma distribuição normal?
        a. Hipótese Nula (H0): A distribuição da pressão arterial na população segue uma distribuição normal.
        b. Hipótese Alternativa (H1): A distribuição da pressão arterial na população não segue uma distribuição normal.
"""

import pandas as pd
from scipy.stats import shapiro
import matplotlib.pyplot as plt
import statsmodels.api as sm


# Carregar a base de dados com o caminho correto
df_pacientes = pd.read_csv('/content/drive/MyDrive/testes_de_hipoteses/pacientes.csv')


# Assumir que a coluna com os dados da pressão arterial se chama 'Pressao_Arterial'
pressao_arterial = df_pacientes['Pressao_Arterial']  # Corrigido para df_pacientes


# Realizar o teste de Shapiro-Wilk
stat, p = shapiro(pressao_arterial)


# Imprimir os resultados
print('Estatística de teste:', stat)
print('p-valor:', p)


# Interpretar o resultado:
alpha = 0.05
if p > alpha:
    print('A distribuição é provavelmente normal.')
else:
    print('A distribuição não é provavelmente normal.')


# Visualização da distribuição (opcional)
plt.hist(pressao_arterial, bins=30, color='pink')
plt.title('Histograma da Pressão Arterial')
plt.xlabel('Pressão Arterial')
plt.ylabel('Frequência')
plt.show()


# QQ-plot (opcional)
sm.qqplot(pressao_arterial, line='s')
plt.title('QQ-plot da Pressão Arterial')
plt.show()